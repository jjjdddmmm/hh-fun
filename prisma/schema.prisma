generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  clerkId     String     @unique
  email       String     @unique
  name        String?
  preferences Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  properties  Property[]
  timelines   Timeline[]

  @@map("users")
}

model Property {
  id                     String             @id @default(cuid())
  userId                 String
  address                String
  city                   String
  state                  String
  zipCode                String
  price                  BigInt
  askingPrice            BigInt?
  squareFootage          Int?
  bedrooms               Int?
  bathrooms              Decimal?
  yearBuilt              Int?
  propertyType           String?
  lotSize                Decimal?
  propertyTaxes          BigInt?
  hoaFees                BigInt?
  zestimate              BigInt?
  zestimateRangeLow      BigInt?
  zestimateRangeHigh     BigInt?
  rentZestimate          BigInt?
  rentZestimateRangeLow  BigInt?
  rentZestimateRangeHigh BigInt?
  zestimateLastUpdated   DateTime?
  mlsNumber              String?
  mlsUrl                 String?
  images                 Json?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  deletedAt              DateTime?
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses               PropertyAnalysis[]
  timeline               Timeline?

  @@map("properties")
}

model PropertyAnalysis {
  id           String   @id @default(cuid())
  propertyId   String
  analysisType String
  aiModel      String
  analysis     Json
  confidence   Decimal?
  createdAt    DateTime @default(now())
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_analyses")
}

model Timeline {
  id                   String               @id @default(cuid())
  propertyId           String               @unique
  userId               String
  title                String               @default("Home Purchase Timeline")
  startDate            DateTime             @default(now())
  estimatedClosingDate DateTime?
  actualClosingDate    DateTime?
  status               TimelineStatus       @default(ACTIVE)
  progressPercentage   Decimal              @default(0) @db.Decimal(5, 2)
  totalSteps           Int                  @default(10)
  completedSteps       Int                  @default(0)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  documents            TimelineDocument[]
  notes                TimelineNote[]
  steps                TimelineStep[]
  teamMembers          TimelineTeamMember[]
  property             Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([startDate])
  @@map("timelines")
}

model TimelineStep {
  id                String                @id @default(cuid())
  timelineId        String
  title             String
  description       String
  category          StepCategory
  icon              String
  sortOrder         Int
  isRequired        Boolean               @default(true)
  daysFromStart     Int
  estimatedDuration Int
  scheduledDate     DateTime?
  actualStartDate   DateTime?
  actualEndDate     DateTime?
  status            StepStatus            @default(UPCOMING)
  isCompleted       Boolean               @default(false)
  isBlocked         Boolean               @default(false)
  blockReason       String?
  notes             String?
  completedBy       String?
  estimatedCost     BigInt?
  actualCost        BigInt?
  priority          StepPriority          @default(MEDIUM)
  externalUrl       String?
  reminderSent      Boolean               @default(false)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  documents         TimelineDocument[]
  comments          TimelineStepComment[]
  timeline          Timeline              @relation(fields: [timelineId], references: [id], onDelete: Cascade)

  @@index([timelineId])
  @@index([status])
  @@index([category])
  @@index([scheduledDate])
  @@index([sortOrder])
  @@map("timeline_steps")
}

model TimelineDocument {
  id              String        @id @default(cuid())
  timelineId      String
  stepId          String?
  fileName        String
  originalName    String
  mimeType        String
  fileSize        BigInt
  documentType    DocumentType
  storageProvider String
  storageKey      String
  downloadUrl     String?
  thumbnailUrl    String?
  description     String?
  tags            String[]
  isRequired      Boolean       @default(false)
  isVerified      Boolean       @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?
  uploadedBy      String
  isPublic        Boolean       @default(false)
  sharedWith      String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  step            TimelineStep? @relation(fields: [stepId], references: [id], onDelete: Cascade)
  timeline        Timeline      @relation(fields: [timelineId], references: [id], onDelete: Cascade)

  @@index([timelineId])
  @@index([stepId])
  @@index([documentType])
  @@index([uploadedBy])
  @@map("timeline_documents")
}

model TimelineTeamMember {
  id               String         @id @default(cuid())
  timelineId       String
  name             String
  role             TeamMemberRole
  company          String?
  email            String?
  phone            String?
  website          String?
  licenseNumber    String?
  specialties      String[]
  rating           Decimal?       @db.Decimal(3, 2)
  preferredContact ContactMethod  @default(EMAIL)
  availability     String?
  timezone         String?
  isPrimary        Boolean        @default(false)
  isActive         Boolean        @default(true)
  recommendedBy    String?
  notes            String?
  lastContact      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  timeline         Timeline       @relation(fields: [timelineId], references: [id], onDelete: Cascade)

  @@index([timelineId])
  @@index([role])
  @@index([isActive])
  @@map("timeline_team_members")
}

model TimelineNote {
  id          String   @id @default(cuid())
  timelineId  String
  title       String?
  content     String
  noteType    NoteType @default(GENERAL)
  tags        String[]
  isImportant Boolean  @default(false)
  isPrivate   Boolean  @default(false)
  authorId    String
  authorName  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  timeline    Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)

  @@index([timelineId])
  @@index([noteType])
  @@index([createdAt])
  @@map("timeline_notes")
}

model TimelineStepComment {
  id          String       @id @default(cuid())
  stepId      String
  content     String
  commentType CommentType  @default(UPDATE)
  authorId    String
  authorName  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  step        TimelineStep @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@index([stepId])
  @@index([createdAt])
  @@map("timeline_step_comments")
}

enum TimelineStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
  DELAYED

  @@map("timeline_status")
}

enum StepCategory {
  LEGAL
  FINANCING
  INSPECTION
  PAPERWORK
  COMMUNICATION
  CLOSING

  @@map("step_category")
}

enum StepStatus {
  UPCOMING
  CURRENT
  COMPLETED
  SKIPPED
  BLOCKED
  OVERDUE

  @@map("step_status")
}

enum StepPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@map("step_priority")
}

enum DocumentType {
  CONTRACT
  FINANCIAL
  INSPECTION
  APPRAISAL
  INSURANCE
  TITLE
  MORTGAGE
  CLOSING
  CORRESPONDENCE
  RECEIPT
  OTHER

  @@map("document_type")
}

enum TeamMemberRole {
  BUYER_AGENT
  SELLER_AGENT
  LENDER
  LOAN_OFFICER
  INSPECTOR
  APPRAISER
  ATTORNEY
  TITLE_COMPANY
  INSURANCE_AGENT
  CONTRACTOR
  ESCROW_OFFICER
  OTHER

  @@map("team_member_role")
}

enum ContactMethod {
  EMAIL
  PHONE
  TEXT
  BOTH

  @@map("contact_method")
}

enum NoteType {
  GENERAL
  MILESTONE
  ISSUE
  DECISION
  REMINDER

  @@map("note_type")
}

enum CommentType {
  UPDATE
  QUESTION
  ISSUE
  RESOLUTION
  REMINDER

  @@map("comment_type")
}
