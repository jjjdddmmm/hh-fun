// HH.Fun Database Schema
// Clean architecture with strategic naming for scalability

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE ENTITIES (Phase 1)
// ============================================================================

// Users - App-specific data (Clerk handles authentication)
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  preferences Json?  // User settings, AI chat preferences
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  properties Property[]
  timelines  Timeline[]
  
  @@map("users")
}

// Properties - Core real estate data
model Property {
  id     String @id @default(cuid())
  userId String
  
  // Basic Information
  address     String
  city        String
  state       String
  zipCode     String
  price       BigInt  // In cents for precision
  askingPrice BigInt? // In cents for precision
  
  // Property Details
  squareFootage Int?
  bedrooms      Int?
  bathrooms     Decimal?
  yearBuilt     Int?
  propertyType  String?
  lotSize       Decimal?
  
  // Financial Information
  propertyTaxes BigInt? // Annual, in cents
  hoaFees       BigInt? // Monthly, in cents
  
  // Zestimate Data
  zestimate             BigInt?   // Current Zestimate in cents
  zestimateRangeLow     BigInt?   // Low range in cents
  zestimateRangeHigh    BigInt?   // High range in cents
  rentZestimate         BigInt?   // Monthly rent estimate in cents
  rentZestimateRangeLow BigInt?   // Low range in cents
  rentZestimateRangeHigh BigInt?  // High range in cents
  zestimateLastUpdated  DateTime? // When Zestimate was last updated
  
  // External Data
  mlsNumber String?
  mlsUrl    String?
  images    Json?    // Array of image URLs
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // Soft delete support
  
  // Relations
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses  PropertyAnalysis[]
  timeline  Timeline?
  
  @@map("properties")
}

// AI Analysis Results
model PropertyAnalysis {
  id           String   @id @default(cuid())
  propertyId   String
  analysisType String   // 'comprehensive', 'investment', 'negotiation'
  aiModel      String   // Track which AI model was used
  analysis     Json     // Full AI response
  confidence   Decimal? // AI confidence score
  createdAt    DateTime @default(now())
  
  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("property_analyses")
}

// ============================================================================
// TIMELINE SYSTEM (Phase 2)
// ============================================================================

// Timeline - Main timeline instance for a property purchase
model Timeline {
  id         String   @id @default(cuid())
  propertyId String   @unique // One timeline per property
  userId     String   // For ownership verification
  
  // Timeline Configuration
  title              String   @default("Home Purchase Timeline")
  startDate          DateTime @default(now()) // When offer was accepted
  estimatedClosingDate DateTime? // Target closing date
  actualClosingDate    DateTime? // Actual closing date when completed
  
  // Timeline Settings
  status             TimelineStatus @default(ACTIVE)
  progressPercentage Decimal        @default(0) @db.Decimal(5,2) // 0-100 with 2 decimal places
  totalSteps         Int            @default(10)
  completedSteps     Int            @default(0)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  property    Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps       TimelineStep[]
  documents   TimelineDocument[]
  teamMembers TimelineTeamMember[]
  notes       TimelineNote[]
  
  // Indexes for performance
  @@index([userId])
  @@index([status])
  @@index([startDate])
  @@map("timelines")
}

// Timeline Steps - Individual steps in the home buying process
model TimelineStep {
  id         String @id @default(cuid())
  timelineId String
  
  // Step Configuration
  title          String
  description    String
  category       StepCategory
  icon           String        // Lucide icon name
  sortOrder      Int           // For custom ordering
  isRequired     Boolean       @default(true)
  
  // Timing
  daysFromStart     Int     // Days from timeline start
  estimatedDuration Int     // Duration in days
  scheduledDate     DateTime? // Calculated or manually set date
  actualStartDate   DateTime? // When step was actually started
  actualEndDate     DateTime? // When step was completed
  
  // Status & Progress
  status      StepStatus @default(UPCOMING)
  isCompleted Boolean    @default(false)
  isBlocked   Boolean    @default(false)
  blockReason String?    // Why step is blocked
  
  // Additional Data
  notes            String?    // User notes for this step
  completedBy      String?    // Who completed this step
  estimatedCost    BigInt?    // Cost in cents
  actualCost       BigInt?    // Actual cost in cents
  priority         StepPriority @default(MEDIUM)
  
  // External References
  externalUrl      String?    // Link to relevant resource
  reminderSent     Boolean    @default(false)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  timeline  Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  documents TimelineDocument[]
  comments  TimelineStepComment[]
  
  // Indexes for performance
  @@index([timelineId])
  @@index([status])
  @@index([category])
  @@index([scheduledDate])
  @@index([sortOrder])
  @@map("timeline_steps")
}

// Timeline Documents - Document management for each step
model TimelineDocument {
  id         String @id @default(cuid())
  timelineId String
  stepId     String? // Optional - can be timeline-level or step-specific
  
  // Document Information
  fileName        String
  originalName    String
  mimeType        String
  fileSize        BigInt     // Size in bytes
  documentType    DocumentType
  
  // Storage Information
  storageProvider String     // 'local', 'cloudinary', 's3', etc.
  storageKey      String     // Key/path in storage system
  downloadUrl     String?    // Direct download URL if available
  thumbnailUrl    String?    // Thumbnail for images/PDFs
  
  // Document Metadata
  description     String?
  tags            String[]   // For categorization
  isRequired      Boolean    @default(false)
  isVerified      Boolean    @default(false)
  verifiedBy      String?    // Who verified the document
  verifiedAt      DateTime?
  
  // Access Control
  uploadedBy      String     // User who uploaded
  isPublic        Boolean    @default(false)
  sharedWith      String[]   // List of user IDs with access
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  timeline Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  step     TimelineStep? @relation(fields: [stepId], references: [id], onDelete: Cascade)
  
  // Indexes for performance
  @@index([timelineId])
  @@index([stepId])
  @@index([documentType])
  @@index([uploadedBy])
  @@map("timeline_documents")
}

// Timeline Team Members - People involved in the home buying process
model TimelineTeamMember {
  id         String @id @default(cuid())
  timelineId String
  
  // Contact Information
  name         String
  role         TeamMemberRole
  company      String?
  email        String?
  phone        String?
  website      String?
  
  // Professional Details
  licenseNumber String?
  specialties   String[] // Areas of expertise
  rating        Decimal? @db.Decimal(3,2) // 0-5 rating
  
  // Communication Preferences
  preferredContact ContactMethod @default(EMAIL)
  availability     String?       // e.g., "Mon-Fri 9-5"
  timezone         String?       // e.g., "America/New_York"
  
  // Relationship
  isPrimary        Boolean @default(false) // Primary contact for this role
  isActive         Boolean @default(true)
  recommendedBy    String? // Who recommended this person
  
  // Notes & History
  notes            String?
  lastContact      DateTime?
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  timeline Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  
  // Indexes for performance
  @@index([timelineId])
  @@index([role])
  @@index([isActive])
  @@map("timeline_team_members")
}

// Timeline Notes - General notes and journal entries
model TimelineNote {
  id         String @id @default(cuid())
  timelineId String
  
  // Note Content
  title       String?
  content     String
  noteType    NoteType @default(GENERAL)
  
  // Categorization
  tags        String[]
  isImportant Boolean  @default(false)
  isPrivate   Boolean  @default(false)
  
  // Author Information
  authorId    String   // User who created the note
  authorName  String   // Name at time of creation
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  timeline Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  
  // Indexes for performance
  @@index([timelineId])
  @@index([noteType])
  @@index([createdAt])
  @@map("timeline_notes")
}

// Timeline Step Comments - Comments on specific steps
model TimelineStepComment {
  id     String @id @default(cuid())
  stepId String
  
  // Comment Content
  content     String
  commentType CommentType @default(UPDATE)
  
  // Author Information
  authorId   String   // User who created the comment
  authorName String   // Name at time of creation
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  step TimelineStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  
  // Indexes for performance
  @@index([stepId])
  @@index([createdAt])
  @@map("timeline_step_comments")
}

// ============================================================================
// ENUMS FOR TIMELINE SYSTEM
// ============================================================================

enum TimelineStatus {
  ACTIVE      // Timeline is active and in progress
  COMPLETED   // Timeline completed successfully
  CANCELLED   // Timeline cancelled/abandoned
  ON_HOLD     // Timeline paused
  DELAYED     // Timeline experiencing delays
  
  @@map("timeline_status")
}

enum StepCategory {
  LEGAL       // Legal and contractual steps
  FINANCING   // Mortgage and financial steps
  INSPECTION  // Property inspection related
  PAPERWORK   // Document submission and processing
  COMMUNICATION // Coordination and communication
  CLOSING     // Final closing activities
  
  @@map("step_category")
}

enum StepStatus {
  UPCOMING    // Step not yet started
  CURRENT     // Step is active/in progress
  COMPLETED   // Step completed successfully
  SKIPPED     // Step was skipped
  BLOCKED     // Step is blocked by dependency
  OVERDUE     // Step missed its deadline
  
  @@map("step_status")
}

enum StepPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  
  @@map("step_priority")
}

enum DocumentType {
  CONTRACT         // Purchase contracts
  FINANCIAL        // Financial documents
  INSPECTION       // Inspection reports
  APPRAISAL        // Appraisal documents
  INSURANCE        // Insurance documents
  TITLE            // Title and deed documents
  MORTGAGE         // Mortgage documents
  CLOSING          // Closing documents
  CORRESPONDENCE   // Email and communication
  RECEIPT          // Receipts and invoices
  OTHER            // Other document types
  
  @@map("document_type")
}

enum TeamMemberRole {
  BUYER_AGENT      // Buyer's real estate agent
  SELLER_AGENT     // Seller's real estate agent
  LENDER           // Mortgage lender
  LOAN_OFFICER     // Loan officer
  INSPECTOR        // Home inspector
  APPRAISER        // Property appraiser
  ATTORNEY         // Real estate attorney
  TITLE_COMPANY    // Title company representative
  INSURANCE_AGENT  // Insurance agent
  CONTRACTOR       // Contractor for repairs
  ESCROW_OFFICER   // Escrow officer
  OTHER            // Other team member role
  
  @@map("team_member_role")
}

enum ContactMethod {
  EMAIL
  PHONE
  TEXT
  BOTH
  
  @@map("contact_method")
}

enum NoteType {
  GENERAL     // General timeline note
  MILESTONE   // Important milestone
  ISSUE       // Problem or concern
  DECISION    // Important decision made
  REMINDER    // Reminder for future
  
  @@map("note_type")
}

enum CommentType {
  UPDATE      // Status update
  QUESTION    // Question about the step
  ISSUE       // Issue or problem
  RESOLUTION  // Resolution to a problem
  REMINDER    // Reminder
  
  @@map("comment_type")
}